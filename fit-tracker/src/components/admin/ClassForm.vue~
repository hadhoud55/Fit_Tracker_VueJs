<template>
  <form @submit.prevent="submit" class="grid grid-cols-1 gap-4">
    <div>
      <label for="title" class="block text-gray-700">Title</label>
      <input v-model="form.title" id="title" class="w-full p-2 border rounded" required />
      <p v-if="errors.title" class="text-red-500 text-sm">{{ errors.title }}</p>
    </div>
    <div>
      <label for="category" class="block text-gray-700">Category</label>
      <input v-model="form.category" id="category" class="w-full p-2 border rounded" />
    </div>
    <div>
      <label for="description" class="block text-gray-700">Description</label>
      <textarea v-model="form.description" id="description" class="w-full p-2 border rounded" rows="4"></textarea>
    </div>
    <div>
      <label for="startTime" class="block text-gray-700">Start Time</label>
      <input
          v-model="form.startTime"
          type="datetime-local"
          id="startTime"
          class="w-full p-2 border rounded"
          :min="minDateTime"
          required
      />
      <p v-if="errors.startTime" class="text-red-500 text-sm">{{ errors.startTime }}</p>
    </div>
    <div>
      <label for="endTime" class="block text-gray-700">End Time</label>
      <input
          v-model="form.endTime"
          type="datetime-local"
          id="endTime"
          class="w-full p-2 border rounded"
          :min="minDateTime"
          required
      />
      <p v-if="errors.endTime" class="text-red-500 text-sm">{{ errors.endTime }}</p>
    </div>
    <div>
      <label for="capacity" class="block text-gray-700">Capacity</label>
      <input
          v-model.number="form.capacity"
          type="number"
          id="capacity"
          class="w-full p-2 border rounded"
          min="0"
          required
      />
      <p v-if="errors.capacity" class="text-red-500 text-sm">{{ errors.capacity }}</p>
    </div>
    <div>
      <label for="coachId" class="block text-gray-700">Coach ID</label>
      <input
          v-model.number="form.coachId"
          type="number"
          id="coachId"
          class="w-full p-2 border rounded"
          min="1"
          required
      />
      <p v-if="errors.coachId" class="text-red-500 text-sm">{{ errors.coachId }}</p>
    </div>
    <div>
      <label for="imageUrls" class="block text-gray-700">Image URLs (comma-separated)</label>
      <input
          v-model="imageUrlsInput"
          id="imageUrls"
          class="w-full p-2 border rounded"
          placeholder="https://example.com/image1.jpg,https://example.com/image2.jpg"
      />
    </div>
    <div>
      <label for="workoutIds" class="block text-gray-700">Workout IDs (comma-separated)</label>
      <input
          v-model="workoutIdsInput"
          id="workoutIds"
          class="w-full p-2 border rounded"
          placeholder="1,2,3"
          required
      />
      <p v-if="errors.workoutIds" class="text-red-500 text-sm">{{ errors.workoutIds }}</p>
    </div>
    <div class="flex justify-end">
      <button
          v-if="isEditMode"
          type="button"
          @click="$emit('cancel')"
          class="mr-2 bg-gray-500 text-white py-2 px-4 rounded hover:bg-gray-600"
      >
        Cancel
      </button>
      <button
          type="submit"
          class="bg-accent text-white py-2 px-4 rounded hover:bg-green-700"
          :disabled="hasErrors"
      >
        {{ isEditMode ? 'Update' : 'Create' }} Class
      </button>
    </div>
  </form>
</template>

<script>
import ClassService from '@/services/classes.js';
import { mapGetters } from 'vuex';

export default {
  props: {
    classData: {
      type: Object,
      default: null,
    },
  },
  data() {
    return {
      form: {
        title: '',
        category: '',
        description: '',
        startTime: '',
        endTime: '',
        capacity: 10,
        coachId: null,
        imageUrls: [],
        workoutIds: [],
      },
      imageUrlsInput: '',
      workoutIdsInput: '',
      errors: {
        title: '',
        startTime: '',
        endTime: '',
        capacity: '',
        coachId: '',
        workoutIds: '',
      },
    };
  },
  computed: {
    ...mapGetters(['userId', 'userRole']),
    isEditMode() {
      return !!this.classData;
    },
    minDateTime() {
      const now = new Date();
      now.setMinutes(now.getMinutes() + 1); // Allow times slightly in the future
      return now.toISOString().slice(0, 16); // Format: YYYY-MM-DDTHH:mm
    },
    hasErrors() {
      return Object.values(this.errors).some(error => error !== '');
    },
  },
  methods: {
    validateForm() {
      this.errors = {
        title: '',
        startTime: '',
        endTime: '',
        capacity: '',
        coachId: '',
        workoutIds: '',
      };
      let isValid = true;

      if (!this.form.title) {
        this.errors.title = 'Title is required';
        isValid = false;
      }

      const now = new Date();
      const startTime = this.form.startTime ? new Date(this.form.startTime) : null;
      if (!startTime) {
        this.errors.startTime = 'Start time is required';
        isValid = false;
      } else if (startTime <= now) {
        this.errors.startTime = 'Start time must be in the future';
        isValid = false;
      }

      const endTime = this.form.endTime ? new Date(this.form.endTime) : null;
      if (!endTime) {
        this.errors.endTime = 'End time is required';
        isValid = false;
      } else if (endTime <= now) {
        this.errors.endTime = 'End time must be in the future';
        isValid = false;
      } else if (startTime && endTime <= startTime) {
        this.errors.endTime = 'End time must be after start time';
        isValid = false;
      }

      if (this.form.capacity < 0) {
        this.errors.capacity = 'Capacity must be non-negative';
        isValid = false;
      }

      if (!this.form.coachId || this.form.coachId <= 0) {
        this.errors.coachId = 'Valid Coach ID is required';
        isValid = false;
      }

      if (!this.workoutIdsInput || !this.form.workoutIds.length) {
        this.errors.workoutIds = 'At least one workout ID is required';
        isValid = false;
      }

      return isValid;
    },
    async submit() {
      if (!['ADMIN'].includes(this.userRole) && this.isEditMode) {
        this.$toast.error('Unauthorized: Admin access required');
        return;
      }

      this.form.imageUrls = this.imageUrlsInput
          ? this.imageUrlsInput.split(',').map(url => url.trim()).filter(url => url)
          : [];
      this.form.workoutIds = this.workoutIdsInput
          ? this.workoutIdsInput.split(',').map(id => parseInt(id.trim())).filter(id => !isNaN(id))
          : [];

      if (!this.validateForm()) {
        this.$toast.error('Please fix the form errors');
        return;
      }

      try {
        // Format dates to ISO 8601 for backend compatibility
        const payload = {
          ...this.form,
          startTime: new Date(this.form.startTime).toISOString(),
          endTime: new Date(this.form.endTime).toISOString(),
        };

        if (this.isEditMode) {
          await ClassService.update(this.classData.id, payload);
          this.$emit('class-updated');
          this.$toast.success('Class updated successfully');
        } else {
          await ClassService.create(payload);
          this.$emit('class-created');
          this.$toast.success('Class created successfully');
        }
        this.resetForm();
      } catch (error) {
        const errorMessage = error.response?.data?.message || error.response?.data?.startTime || 'Failed to save class';
        this.$toast.error(errorMessage);
      }
    },
    resetForm() {
      this.form = {
        title: '',
        category: '',
        description: '',
        startTime: '',
        endTime: '',
        capacity: 10,
        coachId: null,
        imageUrls: [],
        workoutIds: [],
      };
      this.imageUrlsInput = '';
      this.workoutIdsInput = '';
      this.errors = {
        title: '',
        startTime: '',
        endTime: '',
        capacity: '',
        coachId: '',
        workoutIds: '',
      };
    },
  },
  watch: {
    'form.startTime': function () {
      this.validateForm();
    },
    'form.endTime': function () {
      this.validateForm();
    },
  },
  created() {
    if (this.classData) {
      this.form = {
        ...this.classData,
        // Convert ISO dates to datetime-local format (YYYY-MM-DDTHH:mm)
        startTime: this.classData.startTime ? new Date(this.classData.startTime).toISOString().slice(0, 16) : '',
        endTime: this.classData.endTime ? new Date(this.classData.endTime).toISOString().slice(0, 16) : '',
      };
      this.imageUrlsInput = this.classData.imageUrls?.join(', ') || '';
      this.workoutIdsInput = this.classData.workoutIds?.join(', ') || '';
    }
  },
};
</script>